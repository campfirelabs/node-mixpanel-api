// Generated by CoffeeScript 1.4.0
(function() {
  var MixpanelAPI, crypto, http, querystring, util,
    __slice = [].slice;

  http = require('http');

  querystring = require('querystring');

  crypto = require('crypto');

  util = require('util');

  MixpanelAPI = (function() {

    function MixpanelAPI(options) {
      var key, val;
      this.options = {
        api_key: null,
        api_secret: null,
        default_valid_for: 60,
        log_fn: this.log
      };
      for (key in options) {
        val = options[key];
        this.options[key] = val;
      }
      if (!this.options.api_key && this.options.api_secret) {
        throw new Error('MixpanelAPI needs token and secret parameters');
      }
    }

    MixpanelAPI.prototype.signedUrl = function(endpoint, params, valid_for, cb) {
      var params_qs;
      cb || (cb = this.options.log_fn);
      try {
        if (typeof params !== 'object' || typeof endpoint !== 'string') {
          throw new Error('request(endpoint, params, [valid_for], [cb]) expects an object params');
        }
        if (arguments.length === 3 && typeof arguments[2] === 'function') {
          cb = valid_for;
          valid_for = null;
        }
        valid_for || (valid_for = this.options.default_valid_for);
        cb || (cb = this.options.log_fn);
        params.api_key = this.options.api_key;
        params.expire = Math.floor(Date.now() / 1000) + valid_for;
        params_qs = querystring.stringify(this._sign_params(params));
        return cb(null, 'http://mixpanel.com/api/2.0/' + endpoint + '?' + params_qs);
      } catch (e) {
        return cb(e);
      }
    };

    MixpanelAPI.prototype.request = function(endpoint, params, valid_for, cb) {
      var params_qs, req, req_opts,
        _this = this;
      cb || (cb = this.options.log_fn);
      try {
        if (typeof params !== 'object' || typeof endpoint !== 'string') {
          throw new Error('request(endpoint, params, [valid_for], [cb]) expects an object params');
        }
        if (arguments.length === 3 && typeof arguments[2] === 'function') {
          cb = valid_for;
          valid_for = null;
        }
        valid_for || (valid_for = this.options.default_valid_for);
        cb || (cb = this.options.log_fn);
        params.api_key = this.options.api_key;
        params.expire = Math.floor(Date.now() / 1000) + valid_for;
        params_qs = this._generate_query(this._sign_params(params));
        req_opts = {
          host: 'mixpanel.com',
          port: 80,
          path: '/api/2.0/' + endpoint + '?' + params_qs
        };
        req = http.get(req_opts, function(res) {
          var body;
          res.setEncoding('utf8');
          body = [];
          res.on('data', function(chunk) {
            return body.push(chunk);
          });
          return res.addListener('end', function() {
            var error, result;
            try {
              result = JSON.parse(body.join(''));
              error = null;
              if (result.error) {
                error = new Error(result.error);
              } else if (res.statusCode !== 200) {
                error = new Error("Bad res code " + res.statusCode + " but no error");
              }
              return cb(error, result);
            } catch (e) {
              return cb(e);
            }
          });
        });
        return req.on('error', cb);
      } catch (e) {
        return cb(e);
      }
    };

    MixpanelAPI.prototype._generate_query = function(params) {
      var key, keys, param, query, str, _i, _len;
      keys = Object.keys(params).sort();
      query = '';
      for (_i = 0, _len = keys.length; _i < _len; _i++) {
        key = keys[_i];
        param = {};
        param[key] = params[key];
        str = querystring.unescape(querystring.stringify(param));
        if (typeof param[key] === 'object') {
          query += key + '=' + JSON.stringify(param[key]) + '&';
        } else {
          query += str + "&";
        }
      }
      return query;
    };

    MixpanelAPI.prototype._sign_params = function(params) {
      var hash, key, keys, param, to_be_hashed, _i, _len;
      if (!(params != null ? params.api_key : void 0) || !(params != null ? params.expire : void 0)) {
        throw new Error('all requests must have api_key and expire');
      }
      keys = Object.keys(params).sort();
      to_be_hashed = '';
      for (_i = 0, _len = keys.length; _i < _len; _i++) {
        key = keys[_i];
        if (key === 'callback' || key === 'sig') {
          continue;
        }
        param = {};
        param[key] = params[key];
        if (typeof param[key] === 'object') {
          to_be_hashed += key + '=' + JSON.stringify(param[key]);
        } else {
          to_be_hashed += querystring.unescape(querystring.stringify(param));
        }
      }
      hash = crypto.createHash('md5');
      hash.update(to_be_hashed + this.options.api_secret);
      params.sig = hash.digest('hex');
      return params;
    };

    MixpanelAPI.prototype.log = function() {
      var err, other_stuff;
      err = arguments[0], other_stuff = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (err instanceof Error) {
        console.error('Error in MixpanelAPI: ' + err.message);
        return console.error(err);
      }
      return console.log.apply(console, arguments);
    };

    return MixpanelAPI;

  })();

  module.exports = MixpanelAPI;

}).call(this);
